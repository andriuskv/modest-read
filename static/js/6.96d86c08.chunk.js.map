{"version":3,"sources":["utils.js","components/BannerImage/index.js","components/BannerImage/BannerImage.js","assets/icon-text.svg","components/NoMatch/index.js","components/NoMatch/NoMatch.js"],"names":["setDocumentTitle","title","document","classNames","join","trimEnd","async","pageToDataURL","pdf","page","getPage","canvas","createElement","viewport","getViewport","scale","width","DEFAULT_SCALE","height","render","canvasContext","getContext","promise","toDataURL","getPdfInstance","file","pdfjs","arrayBuffer","getDocument","Uint8Array","parseMetadata","metadata","data","info","Title","Author","author","getFileSizeString","bytes","suffixes","size","l","length","toFixed","Math","round","BannerImage","src","iconFull","className","alt","module","exports","NoMatch","message","useEffect"],"mappings":"iHAAA,SAASA,EAAiBC,GACxBC,SAASD,MAAWA,EAAF,gBAGpB,SAASE,KAAcA,GACrB,OAAOA,EAAWC,KAAK,KAAKC,UAG9BC,eAAeC,EAAcC,GAC3B,MACMC,QAAaD,EAAIE,QAAQ,GACzBC,EAAST,SAASU,cAAc,UAGtC,IAAIC,EAAWJ,EAAKK,YAAY,CAAEC,MALZ,KAiBtB,OAVIF,EAASG,MAJI,IAKfH,EAAWJ,EAAKK,YAAY,CAAEC,MAAOE,KAA2BJ,EAASG,QAElEH,EAASK,OANA,MAOhBL,EAAWJ,EAAKK,YAAY,CAAEC,MAAOE,GAA4BJ,EAASK,UAE5EP,EAAOK,MAAQH,EAASG,MACxBL,EAAOO,OAASL,EAASK,aAEnBT,EAAKU,OAAO,CAAEC,cAAeT,EAAOU,WAAW,MAAOR,aAAYS,QACjEX,EAAOY,UAAU,aAAc,IAGxCjB,eAAekB,EAAeC,EAAMC,GAClC,MAAMC,QAAoBF,EAAKE,cAC/B,OAAOD,EAAME,YAAY,IAAIC,WAAWF,IAAcL,QAGxD,SAASQ,EAAcC,GACrB,MAAMC,EAAO,GASb,OAPID,EAASE,KAAKC,QAChBF,EAAK/B,MAAQ8B,EAASE,KAAKC,OAGzBH,EAASE,KAAKE,SAChBH,EAAKI,OAASL,EAASE,KAAKE,QAEvBH,EAGT,SAASK,EAAkBC,GACzB,MAAMC,EAAW,CAAC,IAAK,KAAM,KAAM,MACnC,IAAIC,EAAOF,EACPG,EAAI,EAER,KAAOA,EAAIF,EAASG,UACdF,EAAO,MAITA,GAAQ,IAEVC,GAAK,EAGP,OADAD,EAAOC,EAAI,EAAID,EAAKG,QAAQ,GAAKC,KAAKC,MAAML,GACpC,GAAEA,KAAQD,EAASE,KA9D7B,6M,2ECCeK,ICGA,WACb,OAAO,yBAAKC,IAAKC,IAAUC,UAAU,eAAeC,IAAI,O,mBCL1DC,EAAOC,QAAU,IAA0B,uC,2HCC5BC,UCIA,UAAiB,QAAEC,IAKhC,OAJAC,oBAAU,KACRvD,YAAiB,mBAChB,CAACsD,IAGF,yBAAKL,UAAU,YACb,kBAACH,EAAA,EAAD,MACA,uBAAGG,UAAU,oBAAb","file":"static/js/6.96d86c08.chunk.js","sourcesContent":["function setDocumentTitle(title) {\n  document.title = `${title} | ModestRead`;\n}\n\nfunction classNames(...classNames) {\n  return classNames.join(\" \").trimEnd();\n}\n\nasync function pageToDataURL(pdf) {\n  const DEFAULT_SCALE = 0.4;\n  const page = await pdf.getPage(1);\n  const canvas = document.createElement(\"canvas\");\n  const maxWidth = 162;\n  const maxHeight = 240;\n  let viewport = page.getViewport({ scale: DEFAULT_SCALE });\n\n  if (viewport.width < maxWidth) {\n    viewport = page.getViewport({ scale: DEFAULT_SCALE * maxWidth / viewport.width });\n  }\n  else if (viewport.height > maxHeight) {\n    viewport = page.getViewport({ scale: DEFAULT_SCALE * maxHeight / viewport.height });\n  }\n  canvas.width = viewport.width;\n  canvas.height = viewport.height;\n\n  await page.render({ canvasContext: canvas.getContext(\"2d\"), viewport }).promise;\n  return canvas.toDataURL(\"image/jpeg\", 0.8);\n}\n\nasync function getPdfInstance(file, pdfjs) {\n  const arrayBuffer = await file.arrayBuffer();\n  return pdfjs.getDocument(new Uint8Array(arrayBuffer)).promise;\n}\n\nfunction parseMetadata(metadata) {\n  const data = {};\n\n  if (metadata.info.Title) {\n    data.title = metadata.info.Title;\n  }\n\n  if (metadata.info.Author) {\n    data.author = metadata.info.Author;\n  }\n  return data;\n}\n\nfunction getFileSizeString(bytes) {\n  const suffixes = [\"B\", \"kB\", \"MB\", \"GB\"];\n  let size = bytes;\n  let l = 0;\n\n  while (l < suffixes.length) {\n    if (size < 1000) {\n      break;\n    }\n    else {\n      size /= 1000;\n    }\n    l += 1;\n  }\n  size = l > 0 ? size.toFixed(1) : Math.round(size);\n  return `${size} ${suffixes[l]}`;\n}\n\nexport {\n  setDocumentTitle,\n  classNames,\n  pageToDataURL,\n  getPdfInstance,\n  parseMetadata,\n  getFileSizeString\n};\n","import BannerImage from \"./BannerImage.js\";\nexport default BannerImage;\n","import React from \"react\";\nimport iconFull from \"../../assets/icon-text.svg\";\nimport \"./banner-image.scss\";\n\nexport default function BannerImage() {\n  return <img src={iconFull} className=\"banner-image\" alt=\"\"/>;\n}\n","module.exports = __webpack_public_path__ + \"static/media/icon-text.9dc879ec.svg\";","import NoMatch from \"./NoMatch.js\";\nexport default NoMatch;\n","import React, { useEffect } from \"react\";\nimport { setDocumentTitle } from \"../../utils\";\nimport BannerImage from \"../BannerImage\";\nimport \"./no-match.scss\";\n\nexport default function NoMatch({ message }) {\n  useEffect(() => {\n    setDocumentTitle(\"Page not found\");\n  }, [message]);\n\n  return (\n    <div className=\"no-match\">\n      <BannerImage/>\n      <p className=\"no-match-message\">The page you are looking for does not exist.</p>\n    </div>\n  );\n}\n"],"sourceRoot":""}